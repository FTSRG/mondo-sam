/*
* generated by Xtext
*/
package eu.mondo.sam.domain.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import eu.mondo.sam.domain.services.BenchmarkGrammarAccess;

public class BenchmarkParser extends AbstractContentAssistParser {
	
	@Inject
	private BenchmarkGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected eu.mondo.sam.domain.ui.contentassist.antlr.internal.InternalBenchmarkParser createParser() {
		eu.mondo.sam.domain.ui.contentassist.antlr.internal.InternalBenchmarkParser result = new eu.mondo.sam.domain.ui.contentassist.antlr.internal.InternalBenchmarkParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getPhaseAccess().getAlternatives(), "rule__Phase__Alternatives");
					put(grammarAccess.getAttachedPhaseAccess().getAlternatives(), "rule__AttachedPhase__Alternatives");
					put(grammarAccess.getAttachedMetricAccess().getAlternatives(), "rule__AttachedMetric__Alternatives");
					put(grammarAccess.getMetricTypeAccess().getAlternatives(), "rule__MetricType__Alternatives");
					put(grammarAccess.getBenchmarkAccess().getGroup(), "rule__Benchmark__Group__0");
					put(grammarAccess.getScenarioAccess().getGroup(), "rule__Scenario__Group__0");
					put(grammarAccess.getSequencePhaseAccess().getGroup(), "rule__SequencePhase__Group__0");
					put(grammarAccess.getIterationPhaseAccess().getGroup(), "rule__IterationPhase__Group__0");
					put(grammarAccess.getOptionalPhaseAccess().getGroup(), "rule__OptionalPhase__Group__0");
					put(grammarAccess.getAtomicPhaseAccess().getGroup(), "rule__AtomicPhase__Group__0");
					put(grammarAccess.getMetricTypeReferenceAccess().getGroup(), "rule__MetricTypeReference__Group__0");
					put(grammarAccess.getNewMetricAccess().getGroup(), "rule__NewMetric__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getBenchmarkAccess().getPackageNameAssignment_1(), "rule__Benchmark__PackageNameAssignment_1");
					put(grammarAccess.getBenchmarkAccess().getElementsAssignment_2(), "rule__Benchmark__ElementsAssignment_2");
					put(grammarAccess.getScenarioAccess().getClassnameAssignment_1(), "rule__Scenario__ClassnameAssignment_1");
					put(grammarAccess.getScenarioAccess().getRootPhaseAssignment_3(), "rule__Scenario__RootPhaseAssignment_3");
					put(grammarAccess.getSequencePhaseAccess().getNameAssignment_1(), "rule__SequencePhase__NameAssignment_1");
					put(grammarAccess.getSequencePhaseAccess().getPhasesAssignment_3(), "rule__SequencePhase__PhasesAssignment_3");
					put(grammarAccess.getIterationPhaseAccess().getNameAssignment_1(), "rule__IterationPhase__NameAssignment_1");
					put(grammarAccess.getIterationPhaseAccess().getIterationAssignment_3(), "rule__IterationPhase__IterationAssignment_3");
					put(grammarAccess.getIterationPhaseAccess().getPhaseAssignment_5(), "rule__IterationPhase__PhaseAssignment_5");
					put(grammarAccess.getOptionalPhaseAccess().getNameAssignment_1(), "rule__OptionalPhase__NameAssignment_1");
					put(grammarAccess.getOptionalPhaseAccess().getClassnameAssignment_3(), "rule__OptionalPhase__ClassnameAssignment_3");
					put(grammarAccess.getOptionalPhaseAccess().getPhaseAssignment_5(), "rule__OptionalPhase__PhaseAssignment_5");
					put(grammarAccess.getPhaseReferenceAccess().getPhaseAssignment(), "rule__PhaseReference__PhaseAssignment");
					put(grammarAccess.getNewPhaseAccess().getPhaseAssignment(), "rule__NewPhase__PhaseAssignment");
					put(grammarAccess.getAtomicPhaseAccess().getNameAssignment_1(), "rule__AtomicPhase__NameAssignment_1");
					put(grammarAccess.getAtomicPhaseAccess().getClassnameAssignment_3(), "rule__AtomicPhase__ClassnameAssignment_3");
					put(grammarAccess.getAtomicPhaseAccess().getMetricsAssignment_5(), "rule__AtomicPhase__MetricsAssignment_5");
					put(grammarAccess.getMetricTypeReferenceAccess().getMetricAssignment_0(), "rule__MetricTypeReference__MetricAssignment_0");
					put(grammarAccess.getMetricTypeReferenceAccess().getMetricnameAssignment_2(), "rule__MetricTypeReference__MetricnameAssignment_2");
					put(grammarAccess.getNewMetricAccess().getClassnameAssignment_1(), "rule__NewMetric__ClassnameAssignment_1");
					put(grammarAccess.getNewMetricAccess().getMetricnameAssignment_3(), "rule__NewMetric__MetricnameAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			eu.mondo.sam.domain.ui.contentassist.antlr.internal.InternalBenchmarkParser typedParser = (eu.mondo.sam.domain.ui.contentassist.antlr.internal.InternalBenchmarkParser) parser;
			typedParser.entryRuleBenchmark();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public BenchmarkGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(BenchmarkGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
