/*
* generated by Xtext
*/
package eu.mondo.sam.domain.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class BenchmarkGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class BenchmarkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Benchmark");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cPackageNameAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//Benchmark:
		//	"package" packageName=QualifiedName elements+=Element*;
		public ParserRule getRule() { return rule; }

		//"package" packageName=QualifiedName elements+=Element*
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//packageName=QualifiedName
		public Assignment getPackageNameAssignment_1() { return cPackageNameAssignment_1; }

		//QualifiedName
		public RuleCall getPackageNameQualifiedNameParserRuleCall_1_0() { return cPackageNameQualifiedNameParserRuleCall_1_0; }

		//elements+=Element*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//Element
		public RuleCall getElementsElementParserRuleCall_2_0() { return cElementsElementParserRuleCall_2_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScenarioParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPhaseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//	Scenario | Phase;
		public ParserRule getRule() { return rule; }

		//Scenario | Phase
		public Alternatives getAlternatives() { return cAlternatives; }

		//Scenario
		public RuleCall getScenarioParserRuleCall_0() { return cScenarioParserRuleCall_0; }

		//Phase
		public RuleCall getPhaseParserRuleCall_1() { return cPhaseParserRuleCall_1; }
	}

	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassnameIDTerminalRuleCall_1_0 = (RuleCall)cClassnameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRootPhaseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRootPhaseAttachedPhaseParserRuleCall_3_0 = (RuleCall)cRootPhaseAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Scenario:
		//	"Scenario" classname=ID "{" rootPhase=AttachedPhase "}";
		public ParserRule getRule() { return rule; }

		//"Scenario" classname=ID "{" rootPhase=AttachedPhase "}"
		public Group getGroup() { return cGroup; }

		//"Scenario"
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }

		//classname=ID
		public Assignment getClassnameAssignment_1() { return cClassnameAssignment_1; }

		//ID
		public RuleCall getClassnameIDTerminalRuleCall_1_0() { return cClassnameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//rootPhase=AttachedPhase
		public Assignment getRootPhaseAssignment_3() { return cRootPhaseAssignment_3; }

		//AttachedPhase
		public RuleCall getRootPhaseAttachedPhaseParserRuleCall_3_0() { return cRootPhaseAttachedPhaseParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PhaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Phase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSequencePhaseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIterationPhaseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOptionalPhaseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAtomicPhaseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Phase:
		//	SequencePhase | IterationPhase | OptionalPhase | AtomicPhase;
		public ParserRule getRule() { return rule; }

		//SequencePhase | IterationPhase | OptionalPhase | AtomicPhase
		public Alternatives getAlternatives() { return cAlternatives; }

		//SequencePhase
		public RuleCall getSequencePhaseParserRuleCall_0() { return cSequencePhaseParserRuleCall_0; }

		//IterationPhase
		public RuleCall getIterationPhaseParserRuleCall_1() { return cIterationPhaseParserRuleCall_1; }

		//OptionalPhase
		public RuleCall getOptionalPhaseParserRuleCall_2() { return cOptionalPhaseParserRuleCall_2; }

		//AtomicPhase
		public RuleCall getAtomicPhaseParserRuleCall_3() { return cAtomicPhaseParserRuleCall_3; }
	}

	public class SequencePhaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SequencePhase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSequenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPhasesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPhasesAttachedPhaseParserRuleCall_3_0 = (RuleCall)cPhasesAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SequencePhase:
		//	"Sequence" name=ID? "(" phases+=AttachedPhase+ ")";
		public ParserRule getRule() { return rule; }

		//"Sequence" name=ID? "(" phases+=AttachedPhase+ ")"
		public Group getGroup() { return cGroup; }

		//"Sequence"
		public Keyword getSequenceKeyword_0() { return cSequenceKeyword_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//phases+=AttachedPhase+
		public Assignment getPhasesAssignment_3() { return cPhasesAssignment_3; }

		//AttachedPhase
		public RuleCall getPhasesAttachedPhaseParserRuleCall_3_0() { return cPhasesAttachedPhaseParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class IterationPhaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IterationPhase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIterationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIterationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIterationINTTerminalRuleCall_3_0 = (RuleCall)cIterationAssignment_3.eContents().get(0);
		private final Keyword cAsteriskKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPhaseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPhaseAttachedPhaseParserRuleCall_5_0 = (RuleCall)cPhaseAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IterationPhase:
		//	"Iteration" name=ID? "(" iteration=INT "*" phase=AttachedPhase ")";
		public ParserRule getRule() { return rule; }

		//"Iteration" name=ID? "(" iteration=INT "*" phase=AttachedPhase ")"
		public Group getGroup() { return cGroup; }

		//"Iteration"
		public Keyword getIterationKeyword_0() { return cIterationKeyword_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//iteration=INT
		public Assignment getIterationAssignment_3() { return cIterationAssignment_3; }

		//INT
		public RuleCall getIterationINTTerminalRuleCall_3_0() { return cIterationINTTerminalRuleCall_3_0; }

		//"*"
		public Keyword getAsteriskKeyword_4() { return cAsteriskKeyword_4; }

		//phase=AttachedPhase
		public Assignment getPhaseAssignment_5() { return cPhaseAssignment_5; }

		//AttachedPhase
		public RuleCall getPhaseAttachedPhaseParserRuleCall_5_0() { return cPhaseAttachedPhaseParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class OptionalPhaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionalPhase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPhaseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPhaseAttachedPhaseParserRuleCall_3_0 = (RuleCall)cPhaseAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OptionalPhase:
		//	"Optional" name=ID? "(" phase=AttachedPhase ")";
		public ParserRule getRule() { return rule; }

		//"Optional" name=ID? "(" phase=AttachedPhase ")"
		public Group getGroup() { return cGroup; }

		//"Optional"
		public Keyword getOptionalKeyword_0() { return cOptionalKeyword_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//phase=AttachedPhase
		public Assignment getPhaseAssignment_3() { return cPhaseAssignment_3; }

		//AttachedPhase
		public RuleCall getPhaseAttachedPhaseParserRuleCall_3_0() { return cPhaseAttachedPhaseParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class AttachedPhaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttachedPhase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPhaseReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNewPhaseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AttachedPhase:
		//	PhaseReference | NewPhase;
		public ParserRule getRule() { return rule; }

		//PhaseReference | NewPhase
		public Alternatives getAlternatives() { return cAlternatives; }

		//PhaseReference
		public RuleCall getPhaseReferenceParserRuleCall_0() { return cPhaseReferenceParserRuleCall_0; }

		//NewPhase
		public RuleCall getNewPhaseParserRuleCall_1() { return cNewPhaseParserRuleCall_1; }
	}

	public class PhaseReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PhaseReference");
		private final Assignment cPhaseAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cPhasePhaseCrossReference_0 = (CrossReference)cPhaseAssignment.eContents().get(0);
		private final RuleCall cPhasePhaseIDTerminalRuleCall_0_1 = (RuleCall)cPhasePhaseCrossReference_0.eContents().get(1);
		
		//PhaseReference:
		//	phase=[Phase];
		public ParserRule getRule() { return rule; }

		//phase=[Phase]
		public Assignment getPhaseAssignment() { return cPhaseAssignment; }

		//[Phase]
		public CrossReference getPhasePhaseCrossReference_0() { return cPhasePhaseCrossReference_0; }

		//ID
		public RuleCall getPhasePhaseIDTerminalRuleCall_0_1() { return cPhasePhaseIDTerminalRuleCall_0_1; }
	}

	public class NewPhaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NewPhase");
		private final Assignment cPhaseAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPhasePhaseParserRuleCall_0 = (RuleCall)cPhaseAssignment.eContents().get(0);
		
		//NewPhase:
		//	phase=Phase;
		public ParserRule getRule() { return rule; }

		//phase=Phase
		public Assignment getPhaseAssignment() { return cPhaseAssignment; }

		//Phase
		public RuleCall getPhasePhaseParserRuleCall_0() { return cPhasePhaseParserRuleCall_0; }
	}

	public class AtomicPhaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicPhase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAtomicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cClassNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassnameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassnameIDTerminalRuleCall_3_0 = (RuleCall)cClassnameAssignment_3.eContents().get(0);
		private final Keyword cMetricsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMetricsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMetricsAttachedMetricParserRuleCall_5_0 = (RuleCall)cMetricsAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AtomicPhase:
		//	"Atomic" name=ID? "ClassName" classname=ID "Metrics(" metrics+=AttachedMetric* ")";
		public ParserRule getRule() { return rule; }

		//"Atomic" name=ID? "ClassName" classname=ID "Metrics(" metrics+=AttachedMetric* ")"
		public Group getGroup() { return cGroup; }

		//"Atomic"
		public Keyword getAtomicKeyword_0() { return cAtomicKeyword_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"ClassName"
		public Keyword getClassNameKeyword_2() { return cClassNameKeyword_2; }

		//classname=ID
		public Assignment getClassnameAssignment_3() { return cClassnameAssignment_3; }

		//ID
		public RuleCall getClassnameIDTerminalRuleCall_3_0() { return cClassnameIDTerminalRuleCall_3_0; }

		//"Metrics("
		public Keyword getMetricsKeyword_4() { return cMetricsKeyword_4; }

		//metrics+=AttachedMetric*
		public Assignment getMetricsAssignment_5() { return cMetricsAssignment_5; }

		//AttachedMetric
		public RuleCall getMetricsAttachedMetricParserRuleCall_5_0() { return cMetricsAttachedMetricParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class AttachedMetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttachedMetric");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMetricTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNewMetricParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AttachedMetric:
		//	MetricTypeReference | NewMetric;
		public ParserRule getRule() { return rule; }

		//MetricTypeReference | NewMetric
		public Alternatives getAlternatives() { return cAlternatives; }

		//MetricTypeReference
		public RuleCall getMetricTypeReferenceParserRuleCall_0() { return cMetricTypeReferenceParserRuleCall_0; }

		//NewMetric
		public RuleCall getNewMetricParserRuleCall_1() { return cNewMetricParserRuleCall_1; }
	}

	public class MetricTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetricTypeReference");
		private final Assignment cMetricAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMetricMetricTypeEnumRuleCall_0 = (RuleCall)cMetricAssignment.eContents().get(0);
		
		//MetricTypeReference:
		//	metric=MetricType;
		public ParserRule getRule() { return rule; }

		//metric=MetricType
		public Assignment getMetricAssignment() { return cMetricAssignment; }

		//MetricType
		public RuleCall getMetricMetricTypeEnumRuleCall_0() { return cMetricMetricTypeEnumRuleCall_0; }
	}

	public class NewMetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NewMetric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewMetricKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIDKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cMetricnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMetricnameQualifiedNameParserRuleCall_2_0 = (RuleCall)cMetricnameAssignment_2.eContents().get(0);
		
		//NewMetric:
		//	"new Metric" ("ID" name=ID)? metricname=QualifiedName;
		public ParserRule getRule() { return rule; }

		//"new Metric" ("ID" name=ID)? metricname=QualifiedName
		public Group getGroup() { return cGroup; }

		//"new Metric"
		public Keyword getNewMetricKeyword_0() { return cNewMetricKeyword_0; }

		//("ID" name=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"ID"
		public Keyword getIDKeyword_1_0() { return cIDKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//metricname=QualifiedName
		public Assignment getMetricnameAssignment_2() { return cMetricnameAssignment_2; }

		//QualifiedName
		public RuleCall getMetricnameQualifiedNameParserRuleCall_2_0() { return cMetricnameQualifiedNameParserRuleCall_2_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class MetricTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MetricType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTimeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTimeTimeKeyword_0_0 = (Keyword)cTimeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMemoryEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMemoryMemoryKeyword_1_0 = (Keyword)cMemoryEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cScalarEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cScalarScalarKeyword_2_0 = (Keyword)cScalarEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MetricType:
		//	Time | Memory | Scalar;
		public EnumRule getRule() { return rule; }

		//Time | Memory | Scalar
		public Alternatives getAlternatives() { return cAlternatives; }

		//Time
		public EnumLiteralDeclaration getTimeEnumLiteralDeclaration_0() { return cTimeEnumLiteralDeclaration_0; }

		//"Time"
		public Keyword getTimeTimeKeyword_0_0() { return cTimeTimeKeyword_0_0; }

		//Memory
		public EnumLiteralDeclaration getMemoryEnumLiteralDeclaration_1() { return cMemoryEnumLiteralDeclaration_1; }

		//"Memory"
		public Keyword getMemoryMemoryKeyword_1_0() { return cMemoryMemoryKeyword_1_0; }

		//Scalar
		public EnumLiteralDeclaration getScalarEnumLiteralDeclaration_2() { return cScalarEnumLiteralDeclaration_2; }

		//"Scalar"
		public Keyword getScalarScalarKeyword_2_0() { return cScalarScalarKeyword_2_0; }
	}
	
	private final BenchmarkElements pBenchmark;
	private final ElementElements pElement;
	private final ScenarioElements pScenario;
	private final PhaseElements pPhase;
	private final SequencePhaseElements pSequencePhase;
	private final IterationPhaseElements pIterationPhase;
	private final OptionalPhaseElements pOptionalPhase;
	private final AttachedPhaseElements pAttachedPhase;
	private final PhaseReferenceElements pPhaseReference;
	private final NewPhaseElements pNewPhase;
	private final AtomicPhaseElements pAtomicPhase;
	private final AttachedMetricElements pAttachedMetric;
	private final MetricTypeReferenceElements pMetricTypeReference;
	private final MetricTypeElements unknownRuleMetricType;
	private final NewMetricElements pNewMetric;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BenchmarkGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBenchmark = new BenchmarkElements();
		this.pElement = new ElementElements();
		this.pScenario = new ScenarioElements();
		this.pPhase = new PhaseElements();
		this.pSequencePhase = new SequencePhaseElements();
		this.pIterationPhase = new IterationPhaseElements();
		this.pOptionalPhase = new OptionalPhaseElements();
		this.pAttachedPhase = new AttachedPhaseElements();
		this.pPhaseReference = new PhaseReferenceElements();
		this.pNewPhase = new NewPhaseElements();
		this.pAtomicPhase = new AtomicPhaseElements();
		this.pAttachedMetric = new AttachedMetricElements();
		this.pMetricTypeReference = new MetricTypeReferenceElements();
		this.unknownRuleMetricType = new MetricTypeElements();
		this.pNewMetric = new NewMetricElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eu.mondo.sam.domain.Benchmark".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Benchmark:
	//	"package" packageName=QualifiedName elements+=Element*;
	public BenchmarkElements getBenchmarkAccess() {
		return pBenchmark;
	}
	
	public ParserRule getBenchmarkRule() {
		return getBenchmarkAccess().getRule();
	}

	//Element:
	//	Scenario | Phase;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//Scenario:
	//	"Scenario" classname=ID "{" rootPhase=AttachedPhase "}";
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}

	//Phase:
	//	SequencePhase | IterationPhase | OptionalPhase | AtomicPhase;
	public PhaseElements getPhaseAccess() {
		return pPhase;
	}
	
	public ParserRule getPhaseRule() {
		return getPhaseAccess().getRule();
	}

	//SequencePhase:
	//	"Sequence" name=ID? "(" phases+=AttachedPhase+ ")";
	public SequencePhaseElements getSequencePhaseAccess() {
		return pSequencePhase;
	}
	
	public ParserRule getSequencePhaseRule() {
		return getSequencePhaseAccess().getRule();
	}

	//IterationPhase:
	//	"Iteration" name=ID? "(" iteration=INT "*" phase=AttachedPhase ")";
	public IterationPhaseElements getIterationPhaseAccess() {
		return pIterationPhase;
	}
	
	public ParserRule getIterationPhaseRule() {
		return getIterationPhaseAccess().getRule();
	}

	//OptionalPhase:
	//	"Optional" name=ID? "(" phase=AttachedPhase ")";
	public OptionalPhaseElements getOptionalPhaseAccess() {
		return pOptionalPhase;
	}
	
	public ParserRule getOptionalPhaseRule() {
		return getOptionalPhaseAccess().getRule();
	}

	//AttachedPhase:
	//	PhaseReference | NewPhase;
	public AttachedPhaseElements getAttachedPhaseAccess() {
		return pAttachedPhase;
	}
	
	public ParserRule getAttachedPhaseRule() {
		return getAttachedPhaseAccess().getRule();
	}

	//PhaseReference:
	//	phase=[Phase];
	public PhaseReferenceElements getPhaseReferenceAccess() {
		return pPhaseReference;
	}
	
	public ParserRule getPhaseReferenceRule() {
		return getPhaseReferenceAccess().getRule();
	}

	//NewPhase:
	//	phase=Phase;
	public NewPhaseElements getNewPhaseAccess() {
		return pNewPhase;
	}
	
	public ParserRule getNewPhaseRule() {
		return getNewPhaseAccess().getRule();
	}

	//AtomicPhase:
	//	"Atomic" name=ID? "ClassName" classname=ID "Metrics(" metrics+=AttachedMetric* ")";
	public AtomicPhaseElements getAtomicPhaseAccess() {
		return pAtomicPhase;
	}
	
	public ParserRule getAtomicPhaseRule() {
		return getAtomicPhaseAccess().getRule();
	}

	//AttachedMetric:
	//	MetricTypeReference | NewMetric;
	public AttachedMetricElements getAttachedMetricAccess() {
		return pAttachedMetric;
	}
	
	public ParserRule getAttachedMetricRule() {
		return getAttachedMetricAccess().getRule();
	}

	//MetricTypeReference:
	//	metric=MetricType;
	public MetricTypeReferenceElements getMetricTypeReferenceAccess() {
		return pMetricTypeReference;
	}
	
	public ParserRule getMetricTypeReferenceRule() {
		return getMetricTypeReferenceAccess().getRule();
	}

	//enum MetricType:
	//	Time | Memory | Scalar;
	public MetricTypeElements getMetricTypeAccess() {
		return unknownRuleMetricType;
	}
	
	public EnumRule getMetricTypeRule() {
		return getMetricTypeAccess().getRule();
	}

	//NewMetric:
	//	"new Metric" ("ID" name=ID)? metricname=QualifiedName;
	public NewMetricElements getNewMetricAccess() {
		return pNewMetric;
	}
	
	public ParserRule getNewMetricRule() {
		return getNewMetricAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
